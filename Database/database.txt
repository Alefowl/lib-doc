Данные по табличкам со всеми связями:

create table languages (
id_language smallint primary key,
name_en varchar(255),
name_ru varchar(255),
name_de varchar(255),
name_fr varchar(255),
name_es varchar(255),
name_it varchar(255)
);

create table creators (
id_creator integer primary key,
name_en varchar(255),
name_ru varchar(255),
name_de varchar(255),
name_fr varchar(255),
id_language smallint references languages(id_language),
birth_date smallint,
death_date smallint,
is_creator boolean,
is_translator boolean,
owner integer,
constraint unique_name_and_birth unique (name_en, birth_date)
);

create table metabooks (
id_metabook integer primary key,
id_creator integer references creators(id_creator),
id_language smallint references languages(id_language),
title varchar(255),
create_date smallint,
size integer,
owner integer,
constraint unique_title_for_creator unique (id_creator, title)
);

create table books (
id_book integer primary key,
id_metabook integer references metabooks(id_metabook),
id_language smallint references languages(id_language),
title varchar(255) unique,
creator varchar(255),
translation_date smallint,
id_translator integer references creators(id_creator),
is_ready boolean,
is_visible boolean,
owner integer,
is_deleted boolean default false
);

create table chapters (
id_chapter integer,
id_book integer references books(id_book),
title varchar(255),
head integer,
txt varchar(255),
primary key(id_book, id_chapter)
);

create table tags (
id_tag serial primary key,
owners_title varchar(255),
english_title varchar(255),
russian_title varchar(255),
german_title varchar(255),
owners_description varchar(255),
english_description varchar(255),
russian_description varchar(255),
german_description varchar(255),
colour varchar(255),
owner integer
);

create table tag_chapters (
id_tag_chapter serial primary key,
id_tag integer references tags(id_tag) on delete cascade,
id_book integer references books(id_book),
id_metabook integer references metabooks(id_metabook),
id_chapter integer references chapters(id_chapter),
owner integer
);

create table notes (
id_note integer,
id_book integer references books(id_book) on delete cascade,
id_chapter integer references chapters(id_chapter),
txt varchar(255),
primary key(id_book, id_note)
);

create table uploads (
id_upload serial primary key,
id_book integer references books(id_book),
owner integer,
txt varchar(255),
result varchar(255),
add_time timestamp default now(),
req_size integer,
str_size integer
);

create table users (
id_user serial primary key,
login varchar(255) unique not null,
password varchar(255) not null,
firstname varchar(255),
surname varchar(255),
email varchar(255) unique not null,
tg varchar(255) unique,
fav_books varchar(255),
location varchar(255),
token varchar(255),
role varchar(255),
ts varchar(255)
);

create table downloads (
id_download serial primary key,
id_user integer references users(id_user),
id_left_book integer references books(id_book),
id_right_book integer references books(id_book),
download_time timestamp default now()
);

create table booklists (
id_booklist serial primary key,
title varchar(255),
description varchar(255),
owner integer,
is_visible boolean,
add_time timestamp default now()
);

create table books_in_lists (
id_booklist integer references booklists(id_booklist),
id_book integer references books(id_book),
primary key(id_booklist, id_book)
);
